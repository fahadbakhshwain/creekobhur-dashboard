import streamlit as st
import pandas as pd
import datetime
import os

# ุงุณู ุงูููู ูุญูุธ ุจูุงูุงุช ุนูุงู ุงููุธุงูุฉ
CLEANING_STAFF_DATA_FILE = "cleaning_staff_daily_data.csv"

# ุฏุงูุฉ ูุชุญููู ุจูุงูุงุช ุนูุงู ุงููุธุงูุฉ
def load_cleaning_staff_data():
    if os.path.exists(CLEANING_STAFF_DATA_FILE):
        try:
            expected_columns = [
                "ุงูุชุงุฑูุฎ", "ุงููุดุฑู_ุงููุณุฌู", "ุงุณู_ุงูุนุงูู", "ููุช_ุงูุญุถูุฑ", 
                "ุญุงูุฉ_ุงูุญุถูุฑ", "ุงูููุทูุฉ_ุงููุฎุตุตุฉ", "ุงูููุงู_ุงูููููุฉ", 
                "ุญุงูุฉ_ุงูููุงู", "ููุงุญุธุงุช"
            ]
            df = pd.read_csv(CLEANING_STAFF_DATA_FILE)
            for col in expected_columns:
                if col not in df.columns:
                    df[col] = "" 
            return df[expected_columns]
        except pd.errors.EmptyDataError:
            return pd.DataFrame(columns=expected_columns)
    return pd.DataFrame(columns=expected_columns)

# ุฏุงูุฉ ูุญูุธ ุจูุงูุงุช ุนูุงู ุงููุธุงูุฉ
def save_cleaning_staff_data(df):
    df.to_csv(CLEANING_STAFF_DATA_FILE, index=False)

def run():
    st.title("๐งน ุฅุฏุงุฑุฉ ุนูุงู ุงููุธุงูุฉ")
    st.info("ููุง ูุชู ุชุณุฌูู ุญุถูุฑ ุนูุงู ุงููุธุงูุฉุ ุชูุฒูุน ุงูููุงูุ ููุชุงุจุนุฉ ุงูุฅูุฌุงุฒ.")

    # ุงููุดุฑููู ุงููุณุคูููู ุนู ุนูุงู ุงููุธุงูุฉ
    cleaning_supervisors = ["ูุดุฑู ุงููุธุงูุฉ ุงูุฃูู", "ูุดุฑู ุงููุธุงูุฉ ุงูุซุงูู", "ูุดุฑู ุนุงู"]
    
    # ูุงุฆูุฉ ุจุฃุณูุงุก ุนูุงู ุงููุธุงูุฉ (ูุชุจุณูุท ุงูุฅุฏุฎุงู ูู ุงูุจุฑูุชูุชุงูุจ)
    # ูููู ุชุญุฏูุซูุง ูุฏููุงู ุฃู ุณุญุจูุง ูู ูุงุฆูุฉ ูุฑูุฒูุฉ ูุณุชูุจูุงู
    cleaning_staff_names = [
        "ุนุงูู ูุธุงูุฉ 1", "ุนุงูู ูุธุงูุฉ 2", "ุนุงูู ูุธุงูุฉ 3", "ุนุงููุฉ ูุธุงูุฉ 1", 
        "ุนุงููุฉ ูุธุงูุฉ 2", "ุนุงูู ูุธุงูุฉ 4", "ุนุงูู ูุธุงูุฉ 5"
    ]

    # ุงูููุงุทู ุงูุชู ูููู ุชุนููู ุงูููุงู ููุง
    cleaning_areas = [
        "ุงูุดุงุทุฆ ุงููุจูุฑ", "ุงูุดุงุทุฆ ุงูุตุบูุฑ", "ููููุงู", "ุฌููุน ุฏูุฑุงุช ุงูููุงู", 
        "ููุฏุงู ุงูุณููุฉ", "ููุงุทู ุงูุฃูุนุงุจ", "ุงูุณุงุญุฉ ุงููุจูุฑุฉ", "ุงูููุฑุงุช"
    ]

    st.header("ุชุณุฌูู ุญุถูุฑ ูุชูุฒูุน ููุงู ุนูุงู ุงููุธุงูุฉ")
    with st.form("cleaning_staff_form", clear_on_submit=True):
        entry_date = st.date_input("ุชุงุฑูุฎ ุงูุชุณุฌูู:", datetime.date.today())
        recording_supervisor = st.selectbox("ุงููุดุฑู ุงููุณุคูู ุนู ุงูุชุณุฌูู:", cleaning_supervisors, key="recording_supervisor_select")
        
        # ุงุฎุชูุงุฑ ุงูุนุงูู
        selected_staff_name = st.selectbox("ุงุณู ุงูุนุงูู:", cleaning_staff_names, key="selected_staff_name_select")
        
        col1, col2 = st.columns(2)
        with col1:
            attendance_status = st.radio("ุญุงูุฉ ุงูุญุถูุฑ:", ["ุญุงุถุฑ", "ุบุงุฆุจ", "ุชุฃุฎูุฑ"], key="attendance_status_radio")
            check_in_time = st.time_input("ููุช ุงูุญุถูุฑ ุงููุณุฌู:", datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).time(), key="check_in_time_input")
        
        with col2:
            assigned_area = st.selectbox("ุงูููุทูุฉ ุงููุฎุตุตุฉ ููุนูู:", cleaning_areas, key="assigned_area_select")
            assigned_tasks = st.text_area("ุงูููุงู ุงูููููุฉ (ูุซู: ุชูุธูู ุฏูุฑุฉ ููุงู 5ุ ููุณ ุงูุดุงุทุฆ ุงููุจูุฑ):", height=100, key="assigned_tasks_text")
            task_status = st.selectbox("ุญุงูุฉ ุฅูุฌุงุฒ ุงูููุงู:", ["ููุฏ ุงูุชูููุฐ", "ุชู ุงูุฅูุฌุงุฒ", "ูู ูุชู ุงูุจุฏุก", "ูุดููุฉ"], key="task_status_select")
        
        general_notes = st.text_area("ููุงุญุธุงุช ุนุงูุฉ ุญูู ุงูุนุงูู/ุฃุฏุงุก ุงููุธุงูุฉ:", height=100, key="general_notes_text")

        submitted = st.form_submit_button("ุชุณุฌูู ุจูุงูุงุช ุนุงูู ุงููุธุงูุฉ")
        if submitted:
            if not selected_staff_name.strip() or not assigned_tasks.strip():
                st.error("ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุงุณู ุงูุนุงูู ูุฅุฏุฎุงู ุงูููุงู ุงูููููุฉ.")
            else:
                new_entry = pd.DataFrame([{
                    "ุงูุชุงุฑูุฎ": entry_date.isoformat(),
                    "ุงููุดุฑู_ุงููุณุฌู": recording_supervisor,
                    "ุงุณู_ุงูุนุงูู": selected_staff_name,
                    "ููุช_ุงูุญุถูุฑ": check_in_time.strftime("%H:%M"),
                    "ุญุงูุฉ_ุงูุญุถูุฑ": attendance_status,
                    "ุงูููุทูุฉ_ุงููุฎุตุตุฉ": assigned_area,
                    "ุงูููุงู_ุงูููููุฉ": assigned_tasks,
                    "ุญุงูุฉ_ุงูููุงู": task_status,
                    "ููุงุญุธุงุช": general_notes
                }])
                
                all_data = load_cleaning_staff_data()
                if all_data.empty:
                    updated_data = new_entry
                else:
                    updated_data = pd.concat([all_data, new_entry], ignore_index=True)
                save_cleaning_staff_data(updated_data)
                st.success(f"โ ุชู ุชุณุฌูู ุจูุงูุงุช ุงูุนุงูู {selected_staff_name} ุจูุฌุงุญ!")
                st.rerun()

    # ูุณู ุนุฑุถ ููุฎุต ุนูุงู ุงููุธุงูุฉ ุงููููู
    st.header("๐ ููุฎุต ุนูุงู ุงููุธุงูุฉ ุงููููู")
    current_day_data = load_cleaning_staff_data()
    today_date_str = datetime.date.today().isoformat()
    daily_records = current_day_data[current_day_data["ุงูุชุงุฑูุฎ"] == today_date_str]

    if not daily_records.empty:
        st.subheader("ุฅุฌูุงูู ุนุฏุฏ ุงูุนูุงู ุงูุญุงุถุฑูู:")
        present_workers_count = daily_records[daily_records["ุญุงูุฉ_ุงูุญุถูุฑ"] == "ุญุงุถุฑ"].shape[0]
        st.metric("ุนุฏุฏ ุนูุงู ุงููุธุงูุฉ ุงูุญุงุถุฑูู", present_workers_count)

        st.subheader("ุชูุฒูุน ุงูููุงู ูุญุงูุฉ ุงูุฅูุฌุงุฒ ุงูููููุฉ:")
        # ุนุฑุถ ุงูููุงู ุงูููููุฉ ูุญุงูุฉ ุฅูุฌุงุฒูุง
        st.dataframe(daily_records[['ุงุณู_ุงูุนุงูู', 'ุงูููุทูุฉ_ุงููุฎุตุตุฉ', 'ุงูููุงู_ุงูููููุฉ', 'ุญุงูุฉ_ุงูููุงู', 'ููุงุญุธุงุช']].style.set_properties(**{'text-align': 'right', 'font-size': '14px'}), use_container_width=True, hide_index=True)

        st.subheader("ุญุงูุงุช ุชุญุชุงุฌ ูุชุงุจุนุฉ (ุบูุงุจุ ูุดุงูู ููุงู):")
        # ููุชุฑุฉ ุงูุญุงูุงุช ุงูุชู ุชุญุชุงุฌ ูุชุงุจุนุฉ
        attention_needed = daily_records[
            (daily_records["ุญุงูุฉ_ุงูุญุถูุฑ"] != "ุญุงุถุฑ") | 
            (daily_records["ุญุงูุฉ_ุงูููุงู"] == "ูู ูุชู ุงูุจุฏุก") | 
            (daily_records["ุญุงูุฉ_ุงูููุงู"] == "ูุดููุฉ")
        ]
        if not attention_needed.empty:
            for index, row in attention_needed.iterrows():
                status_color = "red" if row['ุญุงูุฉ_ุงูุญุถูุฑ'] in ["ุบุงุฆุจ"] or row['ุญุงูุฉ_ุงูููุงู'] == "ูุดููุฉ" else "orange"
                st.markdown(f"**- <span style='color: {status_color};'>{row['ุงุณู_ุงูุนุงูู']} ({row['ุงูููุทูุฉ_ุงููุฎุตุตุฉ']}):</span>** ุงูุญุถูุฑ: **{row['ุญุงูุฉ_ุงูุญุถูุฑ']}** - ุงูููุงู: **{row['ุญุงูุฉ_ุงูููุงู']}** - ููุงุญุธุงุช: {row['ููุงุญุธุงุช']}", unsafe_allow_html=True)
                st.markdown("---")
        else:
            st.success("๐ ุฌููุน ุนูุงู ุงููุธุงูุฉ ุญุงุถุฑูู ูููุงููู ุชุณูุฑ ุจุดูู ุฌูุฏ ุงูููู.")
            
    else:
        st.info("ูุง ุชูุฌุฏ ุจูุงูุงุช ูุณุฌูุฉ ูุนูุงู ุงููุธุงูุฉ ููุฐุง ุงูููู ุญุชู ุงูุขู.")

# ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ ูุชุดุบูู ุงูุตูุญุฉ
run()
